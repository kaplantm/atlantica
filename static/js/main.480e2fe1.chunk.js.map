{"version":3,"sources":["constants.js","components/Post/Post.js","components/NewsFeed/NewsFeed.js","components/Page/Page.js","components/NavBar/NavBar.js","components/Header/Header.js","components/Waves/Waves.js","serviceWorker.js","index.js","App.js"],"names":["ASSETS_URL","NAVIGATION_ROUTES_CONFIG_PATH","HOME_CONFIG_PATH","SIDEBAR_CONFIG_PATH","NEWS_CONFIG_PATH","Post","path","published","title","type","loader","page","useState","markdown","setMarkdown","useEffect","fetch","then","response","text","data","includes","console","warn","className","source","escapeHtml","size","color","loading","NewsFeed","only","useOnly","newsConfigArray","setNewsConfigArray","JSON","parse","news","e","log","map","newsConfig","file","key","Page","props","url","match","sidebarImageUrl","fileName","substring","markdownPath","undefined","hightlightNewsPost","setHightlightNewsPost","isHome","isNews","renderContent","home","alt","src","curriedPage","initializationProps","NavBar","navigationRoutes","location","useLocation","navigationRoute","route","href","target","rel","filePath","pathname","to","Header","Waves","viewBox","preserveAspectRatio","shapeRendering","id","d","x","y","fill","Boolean","window","hostname","ReactDOM","render","setNavigationRoutes","setSidebarImageUrl","a","navigation","images","sidebar","randomImage","Math","floor","random","length","fetchNavigationData","fetchSideBarImage","basename","exact","component","curriedPageParams","navigationPageUrlConfigMap","reduce","accumulator","currentValue","renderRoutes","class","version","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.480e2fe1.chunk.js","sourcesContent":["// export const ASSETS_URL =\n//   \"https://raw.githubusercontent.com/kaplantm/atlantica-assets/master/\";\n\nexport const ASSETS_URL = \"https://small-hobby.s3.amazonaws.com/atlantica/\";\n// Use this locally\n// export const ASSETS_URL = \"http://127.0.0.1:5501/\";\n\nexport const NAVIGATION_ROUTES_CONFIG_PATH = `${ASSETS_URL}configs/navigation-config.json`;\nexport const HOME_CONFIG_PATH = `${ASSETS_URL}configs/home-config.json`;\nexport const SIDEBAR_CONFIG_PATH = `${ASSETS_URL}configs/sidebar-config.json`;\nexport const NEWS_CONFIG_PATH = `${ASSETS_URL}configs/news-config.json`;\n","import React, { useState, useEffect } from \"react\";\nimport ReactMarkdown from \"react-markdown/with-html\";\nimport Loader from \"react-spinners/BeatLoader\";\nimport \"./style.scss\";\n\nexport function Post({ path, published, title, type = \"post\", page, loader }) {\n  const [markdown, setMarkdown] = useState();\n\n  useEffect(() => {\n    if (!loader) {\n      fetch(path)\n        .then(response => {\n          return response.text();\n        })\n        .then((data = {}) => {\n          setMarkdown(data);\n        });\n    }\n  }, [path, loader]);\n\n  if (!markdown) {\n    return (\n      <div className=\"post-container loading\">\n        <div className=\"loader\">\n          <Loader size={20} color={\"#ffffffbf\"} loading={true} />\n        </div>\n      </div>\n    );\n  }\n  if (\n    markdown &&\n    (markdown.includes(\"404: Not Found\") || markdown.includes(\"Cannot GET\"))\n  ) {\n    console.warn(\"Post not found:\", title);\n    return null;\n  }\n  return (\n    <div>\n      <div className={`post-container ${type}`}>\n        <div className=\"post-header\">\n          <span className=\"published\">{published}</span>\n          {title && (\n            <h3 className={`${published && \"small-top-margin\"}`}>{title}</h3>\n          )}\n        </div>\n\n        <ReactMarkdown source={markdown} escapeHtml={false} />\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { ASSETS_URL, NEWS_CONFIG_PATH } from \"../../constants\";\nimport { Post } from \"../Post/Post\";\nimport \"./style.scss\";\n\nexport function NewsFeed({ only, useOnly }) {\n  const [newsConfigArray, setNewsConfigArray] = useState();\n\n  useEffect(() => {\n    fetch(NEWS_CONFIG_PATH)\n      .then(response => {\n        return response.text();\n      })\n      .then((data = {}) => {\n        try {\n          setNewsConfigArray(JSON.parse(data).news);\n        } catch (e) {\n          console.log(\"Failed to Load News Config\");\n        }\n      });\n  }, []);\n\n  function fetchNews() {\n    return newsConfigArray.map((newsConfig = {}) => {\n      const { type, file, title, published } = newsConfig;\n      console.log({ useOnly });\n      if (useOnly && file !== only) {\n        return null;\n      }\n      return (\n        <Post\n          published={published}\n          path={`${ASSETS_URL}pages/news/${file}.md`}\n          type={type}\n          title={title}\n          key={file}\n        />\n      );\n    });\n  }\n\n  return newsConfigArray ? fetchNews() : null;\n}\n","import React, { useState } from \"react\";\nimport { ASSETS_URL, HOME_CONFIG_PATH } from \"../../constants\";\nimport { NewsFeed } from \"../NewsFeed/NewsFeed\";\nimport { Post } from \"../Post/Post\";\nimport \"./style.scss\";\n\nfunction removeSlashFromURL(url) {\n  if (url && url[0] === \"/\") {\n    return url.substring(1);\n  }\n  return url;\n}\n\nexport function Page(props) {\n  const { match, sidebarImageUrl, loader } = props;\n  const fileName = match.url === \"/\" ? \"home\" : removeSlashFromURL(match.url);\n  const markdownPath = `${ASSETS_URL}pages/${fileName}.md`;\n  const [hightlightNewsPost, setHightlightNewsPost] = useState(undefined);\n\n  function getHomeHighlightedPost() {\n    fetch(HOME_CONFIG_PATH)\n      .then(response => {\n        return response.text();\n      })\n      .then((data = {}) => {\n        try {\n          setHightlightNewsPost(\n            JSON.parse(data).home.hightlightNewsPost || null\n          );\n        } catch (e) {\n          console.log(\"Failed to Load News Config\");\n        }\n      });\n  }\n\n  const isHome = match.url === \"/home\" || match.url === \"/\";\n  const isNews = match.url === \"/news\";\n\n  if (isHome) {\n    getHomeHighlightedPost();\n  }\n\n  function renderContent() {\n    return (\n      <>\n        {(isNews || isHome) && (\n          <NewsFeed useOnly={isHome} only={hightlightNewsPost} />\n        )}\n        {!isNews && <Post path={markdownPath} page={true} loader={loader} />}\n      </>\n    );\n  }\n  return (\n    <div className=\"page-container\">\n      <div className=\"content-column\">\n        {!isHome && renderContent()}\n\n        {isHome && hightlightNewsPost !== undefined && renderContent()}\n      </div>\n      <div className=\"fun-column\">\n        {<img className=\"swing\" alt=\"Random Cartoon\" src={sidebarImageUrl} />}\n      </div>\n    </div>\n  );\n}\n\nexport function curriedPage(initializationProps = {}) {\n  return props => Page({ ...initializationProps, ...props });\n}\n","import React from \"react\";\nimport \"./style.scss\";\nimport { Link, useLocation } from \"react-router-dom\";\n\nexport function NavBar({ navigationRoutes }) {\n  let location = useLocation();\n  function renderNavBarRoutes() {\n    return navigationRoutes.map(navigationRoute => {\n      if (navigationRoute.type === \"external\") {\n        return (\n          <li key={navigationRoute.route}>\n            <a\n              href={navigationRoute.route}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {navigationRoute.title}\n            </a>\n          </li>\n        );\n      }\n\n      const filePath = `/${navigationRoute.file}`;\n      return (\n        <li\n          key={navigationRoute.file}\n          className={location.pathname === filePath ? \"current\" : \"\"}\n        >\n          <Link to={filePath}>{navigationRoute.title}</Link>\n        </li>\n      );\n    });\n  }\n\n  if (navigationRoutes) {\n    return <ul className=\"navBar\">{renderNavBarRoutes()}</ul>;\n  }\n  return null;\n}\n","import React from \"react\";\nimport \"./style.scss\";\nimport { NavBar } from \"../NavBar/NavBar\";\n\nexport function Header({ navigationRoutes }) {\n  return (\n    <header>\n      <div>\n        <h1>RAD Atlantica</h1>\n      </div>\n      {navigationRoutes && <NavBar navigationRoutes={navigationRoutes} />}\n    </header>\n  );\n}\n","import React from \"react\";\nimport \"./style.scss\";\n\nexport function Waves(props) {\n  return (\n    <div className=\"waves-container\">\n      <div>\n        <svg\n          className=\"waves\"\n          viewBox=\"0 24 150 28\"\n          preserveAspectRatio=\"none\"\n          shapeRendering=\"auto\"\n        >\n          <defs>\n            <path\n              id=\"gentle-wave\"\n              d=\"M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z\"\n            />\n          </defs>\n          <g className=\"parallax\">\n            <use href=\"#gentle-wave\" x=\"48\" y=\"0\" fill=\"rgba(255,255,255,0.7\" />\n            <use\n              href=\"#gentle-wave\"\n              x=\"48\"\n              y=\"3\"\n              fill=\"rgba(255,255,255,0.5)\"\n            />\n            <use\n              href=\"#gentle-wave\"\n              x=\"48\"\n              y=\"5\"\n              fill=\"rgba(255,255,255,0.3)\"\n            />\n            <use href=\"gentle-wave\" x=\"48\" y=\"7\" fill=\"#fff\" />\n          </g>\n        </svg>\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState, useEffect } from \"react\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport { curriedPage } from \"./components/Page/Page\";\nimport {\n  NAVIGATION_ROUTES_CONFIG_PATH,\n  SIDEBAR_CONFIG_PATH,\n  ASSETS_URL\n} from \"./constants\";\nimport { Header } from \"./components/Header/Header\";\nimport \"./style.scss\";\nimport { Waves } from \"./components/Waves/Waves\";\nimport { version } from \"../package.json\";\n\nexport default function App() {\n  const [navigationRoutes, setNavigationRoutes] = useState();\n  const [sidebarImageUrl, setSidebarImageUrl] = useState();\n\n  useEffect(() => {\n    fetchNavigationData();\n    fetchSideBarImage();\n  }, []);\n\n  async function fetchNavigationData() {\n    await fetch(NAVIGATION_ROUTES_CONFIG_PATH)\n      .then(response => {\n        return response.text();\n      })\n      .then((data = {}) => {\n        try {\n          setNavigationRoutes(JSON.parse(data).navigation);\n        } catch (e) {\n          console.log(e);\n        }\n      });\n  }\n  async function fetchSideBarImage() {\n    await fetch(SIDEBAR_CONFIG_PATH)\n      .then(response => {\n        return response.text();\n      })\n      .then((data = {}) => {\n        try {\n          const images = JSON.parse(data).sidebar.images;\n          const randomImage = images[Math.floor(Math.random() * images.length)];\n\n          setSidebarImageUrl(`${ASSETS_URL}images/${randomImage}`);\n        } catch (e) {}\n      });\n  }\n\n  function getCurriedPageParams() {\n    const navigationPageUrlConfigMap = navigationRoutes.reduce(\n      (accumulator, currentValue) => {\n        accumulator[`/${currentValue.file}`] = { title: currentValue.title };\n        return accumulator;\n      },\n      {}\n    );\n\n    return { navigationPageUrlConfigMap, sidebarImageUrl };\n  }\n\n  function renderRoutes() {\n    if (!navigationRoutes || !sidebarImageUrl) {\n      return <Route exact path=\"/\" component={curriedPage({ loader: true })} />;\n    }\n    const curriedPageParams = getCurriedPageParams();\n    return (\n      <>\n        <Route exact path=\"/\" component={curriedPage(curriedPageParams)} />\n        <Route\n          exact\n          path=\"/:pageName\"\n          component={curriedPage(curriedPageParams)}\n        />\n      </>\n    );\n  }\n  return (\n    <div className=\"app-container\">\n      <Waves />\n      <div>\n        <Router basename=\"/\">\n          <Header navigationRoutes={navigationRoutes} />\n\n          <div className=\"route-container-bg\">\n            <div className=\"route-container\">{renderRoutes()}</div>\n          </div>\n        </Router>\n      </div>\n      <div class=\"invisible-metadata\">Version: {version}</div>\n    </div>\n  );\n}\n"],"sourceRoot":""}